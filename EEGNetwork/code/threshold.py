# -*- coding: utf-8 -*-
"""Threshold.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nyo1AKc0Mp9QACBrpb1eyFDDg0hzlLwS
"""

import numpy as np
import glob
import matplotlib.pyplot as plt
 
#Import data from the correlation matrices created using Approach 1
#Path in which they are located is dependent on the user's placement in their local machine
sub = sorted(glob.glob("/Users/jdunkley98/spark-2019/data/CorrelationMatrix/Sub-cof-?.txt")) + sorted(glob.glob("/Users/jdunkley98/spark-2019/data/CorrelationMatrix/Sub-cof-??.txt"))

#Starting index should be positioned right before the file name in the absolute path
#If absolute path is /blah/blah/filename, then the starting index is 11
sub = [x[51:] for x in sub]
data = None
count = 0

#Loop through each subject's file and organize the data into a 48x900 matrix
for s in sub:
  with open("/Users/jdunkley98/spark-2019/data/CorrelationMatrix/" + s, 'r') as f:
    lines = f.readlines()[2:]
    for i in range(len(lines)):
        lines[i] = [float(x) for x in lines[i].split('|')[1:-1]]
    if count == 0:
      data = [np.asarray(lines).flatten('C')]
      count += 1
    else:
      tmp = np.asarray(lines).flatten('C')
      data = np.append(data, [tmp], axis=0)
  print("done")

#Defines the threshold of the causal relationship based on the value of the correlation coefficient
#If the value of the coefficient is below the specified threshold, then the return value is 0
#Otherwise, it is 1. These values will be used on a black and white scale later for image classification.
def threshold(x):
  if x > .3:
    return 1
  return 0

#Apply threshold to the matrix
for i in range(len(data)):
  data[i] = [threshold(x) for x in data[i]]

#Reshape the 49x900 matrix into a 48x30x30
#i.e. reshape each subjects data into a 30 channel by 30 channel matrix
data = [x.reshape(30,30) for x in data]

#Loop through each subject's threshold matrix and create a black-and-white mapping of the matrix
#This will help visualize which channels have a strong causal relationship defined by our threshold
for i in range(len(data)):
    matrix = np.asarray(data[i])
    plt.figure()
    plt.imshow(matrix, cmap='gray')
    plt.axis('off')
    fig1 = plt.gcf()
    fig1.savefig("/Users/jdunkley98/spark-2019/data/threshold_img/Threshold-"+str(i)+'-new.png',bbox_inches='tight')